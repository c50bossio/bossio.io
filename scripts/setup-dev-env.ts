#!/usr/bin/env npx tsx
/**
 * Development Environment Setup Script
 * Generates development-friendly environment variables
 */

import { randomBytes } from 'crypto';
import { writeFileSync, existsSync } from 'fs';
import path from 'path';

function generateSecret(length: number = 32): string {
  return randomBytes(length).toString('hex');
}

function generateDevEnvironment(): Record<string, string> {
  return {
    // Core Application
    NEXT_PUBLIC_APP_URL: 'http://localhost:3000',
    
    // Database (keep existing if set)
    DATABASE_URL: process.env.DATABASE_URL || 'your-neon-database-url-here',
    
    // Authentication
    BETTER_AUTH_SECRET: generateSecret(),
    
    // Google OAuth (development keys needed from Google Cloud Console)
    GOOGLE_CLIENT_ID: 'your-google-client-id.apps.googleusercontent.com',
    GOOGLE_CLIENT_SECRET: 'GOCSPX-your-google-client-secret',
    
    // Stripe (test keys)
    STRIPE_SECRET_KEY: 'sk_test_51abcdef...',
    NEXT_PUBLIC_STRIPE_PUBLIC_KEY: 'pk_test_51abcdef...',
    STRIPE_WEBHOOK_SECRET: 'whsec_test123...',
    STRIPE_AI_PRICE_ID: 'price_1234567890abcdef',
    STRIPE_SMS_PRICE_ID: 'price_0987654321fedcba',
    STRIPE_ENTERPRISE_PRICE_ID: 'price_enterprise123',
    
    // Twilio (test keys)
    TWILIO_ACCOUNT_SID: 'ACtest123456789abcdef',
    TWILIO_AUTH_TOKEN: 'test_auth_token_123',
    TWILIO_PHONE_NUMBER: '+15551234567',
    
    // SendGrid (test key)
    SENDGRID_API_KEY: 'SG.test_key_123',
    SENDGRID_FROM_EMAIL: 'test@localhost.dev',
    SENDGRID_FROM_NAME: 'BookedBarber Dev',
    
    // OpenAI (development key needed from OpenAI)
    OPENAI_API_KEY: 'sk-your-openai-key-here',
    
    // Cloudflare R2 (optional for development)
    R2_UPLOAD_IMAGE_ACCESS_KEY_ID: 'dev_access_key_123',
    R2_UPLOAD_IMAGE_SECRET_ACCESS_KEY: 'dev_secret_key_456',
    CLOUDFLARE_ACCOUNT_ID: 'dev_account_id_789',
    R2_UPLOAD_IMAGE_BUCKET_NAME: 'images-dev',
    
    // Cron Jobs
    CRON_SECRET: generateSecret(),
    
    // Polar (optional)
    POLAR_ACCESS_TOKEN: 'polar_dev_token_123',
    POLAR_SUCCESS_URL: '/success?checkout_id={CHECKOUT_ID}',
    POLAR_WEBHOOK_SECRET: 'whsec_polar_dev_123',
    
    // Subscriptions
    NEXT_PUBLIC_STARTER_TIER: 'starter',
    NEXT_PUBLIC_STARTER_SLUG: 'starter-plan',
  };
}

function main() {
  const args = process.argv.slice(2);
  const force = args.includes('--force');
  const outputFile = '.env.local';
  
  console.log('üîß Development Environment Setup\n');
  
  // Check if file already exists
  if (existsSync(outputFile) && !force) {
    console.log(`‚ùå ${outputFile} already exists!`);
    console.log('   Use --force to overwrite, or manually edit the file.');
    process.exit(1);
  }
  
  try {
    const envVars = generateDevEnvironment();
    
    // Generate .env.local content
    let envContent = '# üöÄ Development Environment Variables\n';
    envContent += '# Generated by setup-dev-env.ts\n';
    envContent += `# Generated on: ${new Date().toISOString()}\n\n`;
    
    // Group variables by category
    const categories = {
      'Core Application': ['NEXT_PUBLIC_APP_URL'],
      'Database': ['DATABASE_URL'],
      'Authentication': ['BETTER_AUTH_SECRET', 'GOOGLE_CLIENT_ID', 'GOOGLE_CLIENT_SECRET'],
      'Stripe Payments': ['STRIPE_SECRET_KEY', 'NEXT_PUBLIC_STRIPE_PUBLIC_KEY', 'STRIPE_WEBHOOK_SECRET', 'STRIPE_AI_PRICE_ID', 'STRIPE_SMS_PRICE_ID', 'STRIPE_ENTERPRISE_PRICE_ID'],
      'SMS Notifications': ['TWILIO_ACCOUNT_SID', 'TWILIO_AUTH_TOKEN', 'TWILIO_PHONE_NUMBER'],
      'Email Notifications': ['SENDGRID_API_KEY', 'SENDGRID_FROM_EMAIL', 'SENDGRID_FROM_NAME'],
      'AI Services': ['OPENAI_API_KEY'],
      'File Storage': ['R2_UPLOAD_IMAGE_ACCESS_KEY_ID', 'R2_UPLOAD_IMAGE_SECRET_ACCESS_KEY', 'CLOUDFLARE_ACCOUNT_ID', 'R2_UPLOAD_IMAGE_BUCKET_NAME'],
      'Security': ['CRON_SECRET'],
      'Alternative Payments': ['POLAR_ACCESS_TOKEN', 'POLAR_SUCCESS_URL', 'POLAR_WEBHOOK_SECRET'],
      'Subscriptions': ['NEXT_PUBLIC_STARTER_TIER', 'NEXT_PUBLIC_STARTER_SLUG']
    };
    
    for (const [category, keys] of Object.entries(categories)) {
      envContent += `# ${category}\n`;
      for (const key of keys) {
        if (envVars[key]) {
          envContent += `${key}=${envVars[key]}\n`;
        }
      }
      envContent += '\n';
    }
    
    // Write to file
    writeFileSync(outputFile, envContent);
    
    console.log(`‚úÖ Created ${outputFile} with development environment variables\n`);
    console.log('üîß Next steps:');
    console.log('   1. Edit the file and add your real API keys');
    console.log('   2. Get Google OAuth credentials from Google Cloud Console');
    console.log('   3. Get Stripe test keys from Stripe Dashboard');
    console.log('   4. Get OpenAI API key from OpenAI Platform');
    console.log('   5. Run: npm run dev\n');
    
    console.log('üìù Important placeholders to replace:');
    console.log('   ‚Ä¢ DATABASE_URL - Your Neon PostgreSQL connection string');
    console.log('   ‚Ä¢ GOOGLE_CLIENT_ID & GOOGLE_CLIENT_SECRET - From Google Cloud');
    console.log('   ‚Ä¢ STRIPE_* keys - From Stripe Dashboard (test mode)');
    console.log('   ‚Ä¢ OPENAI_API_KEY - From OpenAI Platform');
    console.log('   ‚Ä¢ Twilio & SendGrid - Optional for development\n');
    
    console.log('üß™ Test your setup:');
    console.log('   npm run deployment:check');
    console.log('   npm run test:apis');
    
  } catch (error) {
    console.error('‚ùå Error generating development environment:', error);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}